generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cabin {
  id           String        @id @default(uuid())
  name         String
  capacity     Int
  price        Float         // Precio base por defecto
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  amenities    String[]
  description  String?
  status       CabinStatus   @default(AVAILABLE)
  images       String[]      @default([])
  reservations Reservation[]
  pricing      CabinPricing[] // Nueva relación
}

model Payment {
  id            String      @id @default(uuid())
  reservationId String
  amount        Float
  method        String
  note          String?
  createdAt     DateTime    @default(now())
  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

model Reservation {
  id                  String               @id @default(uuid())
  guestName           String
  checkIn             DateTime
  checkOut            DateTime
  totalPrice          Float
  cabinId             String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  amountPaid          Float                @default(0)
  guestCount          Int
  guestEmail          String?
  guestLastName       String
  guestPhone          String
  paymentMethod       PaymentMethod?
  paymentNotes        String?
  paymentStatus       PaymentStatus        @default(PENDING)
  specialRequests     String?
  status              ReservationStatus    @default(PENDING)
  userId              String?
  checkInDone         Boolean              @default(false)
  checkOutDone        Boolean              @default(false)
  channel             String?              @default("CALENDAR")
  payments            Payment[]
  cabin               Cabin                @relation(fields: [cabinId], references: [id])
  user                User?                @relation(fields: [userId], references: [id])
  reservationServices ReservationService[]
}

model Service {
  id                  String               @id @default(uuid())
  name                String
  description         String?
  price               Float
  category            ServiceCategory
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  reservationServices ReservationService[]
}

model ReservationService {
  id            String      @id @default(uuid())
  reservationId String
  serviceId     String
  quantity      Int
  price         Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  service       Service     @relation(fields: [serviceId], references: [id])
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  name         String
  lastName     String
  phone        String?
  role         UserRole      @default(EMPLOYEE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  status       UserStatus    @default(ACTIVE)
  reservations Reservation[]
}

enum CabinStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  DEPOSIT
  OTHER
}

enum ServiceCategory {
  FOOD
  BEVERAGE
  ACTIVITY
  TRANSPORT
  CLEANING
  OTHER
}

enum UserRole {
  ADMIN
  EMPLOYEE
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

// Agregar al schema.prisma
model CabinPricing {
  id          String           @id @default(uuid())
  cabinId     String
  startDate   DateTime
  endDate     DateTime
  price       Float
  priceType   CabinPriceType   @default(CUSTOM)
  description String?          // Ej: "Temporada Alta", "Navidad", etc.
  isActive    Boolean          @default(true)
  priority    Int              @default(1) // Para resolver conflictos
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
  cabin       Cabin            @relation(fields: [cabinId], references: [id], onDelete: Cascade)
  
  @@unique([cabinId, startDate, endDate])
  @@index([cabinId, startDate, endDate])
}

enum CabinPriceType {
  BASE        // Precio base de la cabaña
  SEASONAL    // Precio por temporada
  HOLIDAY     // Precio por feriados
  WEEKEND     // Precio de fin de semana
  CUSTOM      // Precio personalizado
}
